// Copyright 2020 Ivan Dmytrenko
//
// Based on Hajime Hoshi https://github.com/hajimehoshi/file2byteslice
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// dircontent2byteslice
package main

import (
	"bytes"
	"compress/gzip"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/iancoleman/strcase"
)

var (
	inputDir    = flag.String("inputDir", "", "input dir path")
	outputDir   = flag.String("outputDir", "", "output dir path")
	packageName = flag.String("package", "main", "package name")
	compress    = flag.Bool("compress", false, "use gzip compression")
	buildtags   = flag.String("buildtags", "", "build tags")
)

func write(w io.Writer, r io.Reader, varName string) error {
	if *compress {
		compressed := &bytes.Buffer{}
		cw, err := gzip.NewWriterLevel(compressed, gzip.BestCompression)
		if err != nil {
			return err
		}
		if _, err := io.Copy(cw, r); err != nil {
			return err
		}
		cw.Close()
		r = compressed
	}

	bs, err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}

	if _, err := fmt.Fprintln(w, "// Code generated by dircontent2byteslice. DO NOT EDIT."); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "// (gofmt is fine after generating)"); err != nil {
		return err
	}
	if *buildtags != "" {
		if _, err := fmt.Fprintln(w, "\n// +build "+*buildtags); err != nil {
			return err
		}
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, "package "+*packageName); err != nil {
		return err
	}
	if _, err := fmt.Fprintln(w, ""); err != nil {
		return err
	}
	if _, err := fmt.Fprintf(w, "var %s = []byte(%q)\n", varName, string(bs)); err != nil {
		return err
	}
	return nil
}

func run() error {
	inputfi, err := os.Lstat(*inputDir)
	if err != nil {
		return err
	}
	outputfi, err := os.Lstat(*outputDir)
	if err != nil {
		return err
	}

	if !inputfi.IsDir() || !outputfi.IsDir() {
		return errors.New("Input or output is not dir")
	}

	files, err := ioutil.ReadDir(*inputDir)
	if err != nil {
		return err
	}

	for _, file := range files {
		camelFileName := strcase.ToCamel(strings.TrimSuffix(file.Name(), filepath.Ext(file.Name())))
		out, err := out(filepath.Join(*outputDir, camelFileName) + ".go")
		if err != nil {
			return err
		}
		in, err := in(filepath.Join(*inputDir, file.Name()))
		if err != nil {
			return err
		}

		if err := write(out, in, camelFileName); err != nil {
			return err
		}
	}

	return nil
}

func out(outputFilename string) (io.Writer, error) {
	if outputFilename != "" {
		f, err := os.Create(outputFilename)
		if err != nil {
			return nil, err
		}
		defer f.Sync()
		return f, nil
	}

	return os.Stdout, nil
}

func in(inputFilename string) (io.Reader, error) {
	if inputFilename != "" {
		f, err := os.Open(inputFilename)

		if err != nil {
			return nil, err
		}
		defer f.Sync()
		return f, nil
	}

	return os.Stdin, nil
}

func main() {
	flag.Parse()
	if err := run(); err != nil {
		panic(err)
	}
}
